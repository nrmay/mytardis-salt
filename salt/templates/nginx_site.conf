upstream mytardis {
    ip_hash;
{% for server in salt['pillar.get']('nginx_upstream_servers', []) %}
    server {{ server['address'] }} {{ server['parameters'] }};
{% endfor %}
{% if 'production' in pillar['roles'] %}
{% set matcher = 'roles:production' %}
{% else %}
{% set matcher = 'roles:testing' %}
{% endif %}
{% for host_id, host_addr in salt['mine.get'](matcher, 'network.ip_addrs', 'grain').items() %}
   {% if host_id in salt['mine.get']('roles:mytardis', 'network.ip_addrs', 'grain') %}
    server {{ host_addr[0] }}:8000 {% if not salt['mine.get'](host_id, 'test.ping') %}down{% endif %};
   {% endif %}
{% endfor %}
}

server {
    listen 80 default;
    server_name {{ salt['pillar.get']('nginx_server_name', 'localhost') }};
{% if pillar.get('nginx_strict_name_checking', True) %}
    if ($host !~* ^({{ salt['pillar.get']('nginx_server_name', 'localhost') }})$ ) {
        return 444;
    }
{% endif %}

{% if salt['pillar.get']('nginx_ssl', False) %}
    rewrite ^ https://$server_name$request_uri? permanent;
{% else %}
    client_max_body_size 4G;
    keepalive_timeout 5;

    gzip off;  # security reasons
    gzip_proxied any;
    # MyTardis generates uncompressed archives, so compress them in transit
    gzip_types application/x-javascript text/css;
    gzip_min_length 1024;
    gzip_vary on;


    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
{% if salt['pillar.get']('gunicorn_ssl', False) %}
        proxy_pass https://mytardis;
{% else %}
        proxy_pass http://mytardis;
{% endif %}
        # this is to solve centos 6 error:
        # upstream prematurely closed
        client_max_body_size 4G;
        client_body_buffer_size 8192k;
        proxy_connect_timeout 2000;
        proxy_send_timeout 2000;
        proxy_read_timeout 2000;
    }

    location /static/ {
        expires 7d;
        alias {{ static_files_dir }}/;
    }
{% for location, args in pillar.get('additional_locations', []) %}
    location /{{ location }}/ {
{% for parameter, value in args.items() %}
        {{ parameter }} {{ value }};
{% endfor %}
    }
{% endfor %}

{% endif %}
}

{% if salt['pillar.get']('nginx_ssl', False) %}
{% set ssldir = salt['pillar.get']('nginx_ssl_dir', "/etc/ssl") %}
server {
    listen 443 ssl;
    server_name {{ salt['pillar.get']('nginx_server_name') }};
{% if pillar.get('nginx_strict_name_checking', True) %}
    if ($host !~* ^({{ salt['pillar.get']('nginx_server_name', 'localhost') }})$ ) {
        return 444;
    }
{% endif %}

    ssl_certificate {{ssldir}}/{{ salt['pillar.get']('nginx_server_name') }}.crt;
    ssl_certificate_key {{ssldir}}/{{ salt['pillar.get']('nginx_server_name') }}.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNull:!MD5;

    client_max_body_size 4G;
    keepalive_timeout 5;

    gzip off;  # security reasons
    gzip_proxied any;
    # MyTardis generates uncompressed archives, so compress them in transit
    gzip_types application/x-javascript text/css;
    gzip_min_length 1024;
    gzip_vary on;


    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
{% if salt['pillar.get']('gunicorn_ssl', False) %}
        proxy_pass https://mytardis;
{% else %}
        proxy_pass http://mytardis;
{% endif %}

        # this is to solve centos 6 error:
        # upstream prematurely closed
        client_max_body_size 4G;
        client_body_buffer_size 8192k;
        proxy_connect_timeout 2000;
        proxy_send_timeout 2000;
        proxy_read_timeout 2000;
    }

    location /static/ {
        expires 7d;
        alias {{ static_files_dir }}/;
    }
{% if salt['pillar.get']('additional_locations', False) != False %}
{% for location, args in salt['pillar.get']('additional_locations', []).items() %}
    location /{{ location }}/ {
{% for parameter, value in args.items() %}
        {{ parameter }} {{ value }};
{% endfor %}
    }
{% endfor %}
{% endif %}
}
{% endif %}
